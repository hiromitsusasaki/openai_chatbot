service: openai-chatbot-api
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: ruby2.7
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1

functions:
  conversation:
    handler: handler.conversation
    timeout: 360
    events:
      - httpApi:
          path: /conversation
          method: get
  conversation_from_slack:
    handler: handler.conversation_from_slack
    environment:
      OPENAI_AUTH_KEY: ${env:OPENAI_AUTH_KEY}
      IAM_USER_AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
      IAM_USER_AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
      BOT_USER_OAUTH_TOKEN: ${env:BOT_USER_OAUTH_TOKEN}
      VERIFICATION_TOKEN: ${env:VERIFICATION_TOKEN}
    timeout: 360
    events:
      - httpApi:
          path: /conversation/from/slack
          method: post

plugins:
  - serverless-offline
  - serverless-ruby-layer

custom:
  defaultStage: dev
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      noStart: true
      inMemory: false
      migrate: true
      seed: true
      convertEmptyValues: true
# Create resource
resources:
  Resources:
    ChatHistoryTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'MessageId'
            AttributeType: 'S'
          - AttributeName: 'SessionId'
            AttributeType: 'S'
          - AttributeName: 'CreatedAt'
            AttributeType: N
        KeySchema:
          - AttributeName: 'MessageId'
            KeyType: 'HASH'
        BillingMode: 'PAY_PER_REQUEST'
        TableName: 'ChatSessions'
        GlobalSecondaryIndexes:
          - IndexName: 'SessionIdIndex'
            KeySchema:
              - AttributeName: 'SessionId'
                KeyType: 'HASH'
              - AttributeName: 'CreatedAt'
                KeyType: 'RANGE'
            Projection:
              ProjectionType: 'ALL'
